{"version":3,"sources":["functions/radioSearch.ts","components/search.tsx","components/stationList.tsx","components/player.tsx","functions/radioPlayer.ts","components/about.tsx","webradio.tsx","index.tsx"],"names":["RadioSearch","query","offset","results","this","undefined","limit","url","name","fetch","then","res","json","map","r","id","tags","country","language","icon","favicon","push","getStreamUrl","station","a","ok","currentSearch","StationList","stations","props","onClick","onStationSelected","key","React","Component","Search","searchTimer","searchList","state","search","createRef","e","target","value","scheduleSearch","clearTimeout","setTimeout","current","scrollTop","setState","radioSearch","className","defaultValue","onInput","searchTextChanged","style","flex","ref","radioPlayer","player","statusEmitter","off","stop","unload","fireStatusChange","Howl","src","autoplay","html5","on","play","pause","newStatus","detail","cb","idx","findIndex","val","splice","Player","status","statusChangeId","onStatusChanged","offStatusChanged","getPlayStatus","setStation","detailText","playButtonText","load","error","togglePlayback","About","href","WebradioApp","selectedTab","selectedStation","tab","userSelect","title","changeTab","tabs","selectedTabName","find","headerContent","tabElements","content","cls","stationSelected","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.97f2f9d7.chunk.js","sourcesContent":["\r\nexport interface Query {\r\n    name: string;\r\n    tags?: string;\r\n    limit?: number;\r\n}\r\n\r\nexport interface Station {\r\n    name: string\r\n    id: number,\r\n    tags: string,\r\n    country: string,\r\n    language: string,\r\n    icon: string,\r\n}\r\n\r\n// api docs at: https://api.radio-browser.info/\r\n// and https://de1.api.radio-browser.info/#Advanced_station_search\r\nexport class RadioSearch {\r\n    public query: Query\r\n    private offset = 0\r\n\r\n    results:Station[] = []\r\n    constructor(query: Query) {\r\n        this.query = query\r\n        if (this.query.limit == undefined)\r\n            this.query.limit = 20\r\n    }\r\n\r\n    async search() {\r\n        // compute url\r\n        let url = `https://www.radio-browser.info/webservice/json/stations/search?name=${this.query.name}&order=votes&reverse=true&limit=${this.query.limit}&offset=${this.offset}`\r\n        // do the stuff\r\n        let results = await fetch(url).then(res => res.json())\r\n        let res:Station[] = results.map(r =>({  name: r.name,\r\n                                                id: r.id,\r\n                                                tags: r.tags,\r\n                                                country: r.country,\r\n                                                language: r.language,\r\n                                                icon: r.favicon,\r\n                                            }))\r\n        this.results.push(...res)\r\n    }\r\n}\r\n\r\nexport async function getStreamUrl(station:Station) {\r\n    var url = \"https://www.radio-browser.info/webservice/v2/json/url/\" + station.id;\r\n    var res = await fetch(url).then(res=>res.json())\r\n    if (res && res.ok)\r\n        return res.url as string;\r\n    else return undefined;\r\n}\r\n","import React from 'react';\r\nimport { RadioSearch, Station } from '../functions/radioSearch';\r\nimport StationList from './stationList';\r\n\r\ninterface SearchState {\r\n    search: RadioSearch|undefined\r\n}\r\n\r\ninterface SearchProps {\r\n    onStationSelected?:(station:Station)=> any\r\n    className?: string\r\n}\r\n\r\nlet currentSearch:RadioSearch|undefined // only one search active at a time\r\n\r\nexport default class Search extends React.Component<SearchProps, SearchState> {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            search: currentSearch\r\n        }\r\n        this.searchList = React.createRef<HTMLDivElement>()\r\n    }\r\n\r\n    async searchTextChanged(e) {\r\n        const query = e.target.value;\r\n        this.scheduleSearch(query)\r\n    }\r\n\r\n    private searchTimer\r\n    private searchList:React.RefObject<HTMLDivElement>\r\n\r\n    async scheduleSearch(query:string) {\r\n        this.searchTimer = clearTimeout(this.searchTimer)\r\n        this.searchTimer = setTimeout(async () => {\r\n            let search = new RadioSearch({name: query})\r\n            currentSearch = search\r\n            await search.search()\r\n            // reset scroll\r\n            if (this.searchList.current) this.searchList.current.scrollTop = 0\r\n            this.setState({\r\n                search\r\n            })\r\n        }, 400)\r\n    }\r\n\r\n    render() {\r\n        const radioSearch = this.state.search; \r\n        let results:Station[]|undefined \r\n        if (radioSearch) {\r\n            results = radioSearch.results\r\n        }\r\n        return (\r\n            <div className={\"search flexible vertical \" + (this.props.className ?? \"\")}>\r\n                <input defaultValue={radioSearch ? radioSearch.query.name : \"\"} \r\n                      onInput={ (e) => { this.searchTextChanged(e) } }></input>\r\n                <div className=\"results flexible vertical\" style={{flex: 1}} >\r\n                    <p>Search results</p>\r\n                    <div ref={this.searchList} className=\"scrollable\">\r\n                        <StationList stations={results} onStationSelected={this.props?.onStationSelected}></StationList>\r\n                    </div>\r\n                </div>  \r\n            </div>\r\n        )\r\n    }\r\n}","import React from \"react\"\r\nimport { Station } from \"../functions/radioSearch\";\r\n\r\ninterface StationsProps {\r\n    stations?: Station[]\r\n    onStationSelected?: (station:Station) => any\r\n}\r\n\r\nexport default class StationList extends React.Component<StationsProps, {}> {\r\n    render() {\r\n        const stations = this.props.stations;\r\n        if (stations) {\r\n            let results = stations.map(station => <div onClick={ () => this.props?.onStationSelected?.(station) } key={station.id}>\r\n                                                 <h3>{station.name}</h3>\r\n                                                 <div>{station.country}</div>\r\n                                                 <hr></hr>\r\n                                               </div> )\r\n            return results\r\n        } else return null\r\n    }\r\n}","import React from \"react\"\r\nimport { Station } from \"../functions/radioSearch\"\r\nimport RadioPlayer, {StatusCallback} from \"../functions/radioPlayer\"\r\n\r\nexport let radioPlayer = new RadioPlayer()\r\n\r\ninterface PlayerProps {\r\n    station:Station|undefined\r\n    className:string\r\n}\r\n\r\ninterface PlayerState {\r\n    status: string\r\n    detail?: string \r\n}\r\n\r\nexport default class Player extends React.Component<PlayerProps, PlayerState> {\r\n    state:PlayerState = {\r\n        status : \"stop\",\r\n        \r\n    }\r\n\r\n    private statusChangeId:StatusCallback|undefined\r\n    componentDidMount() {\r\n        this.statusChangeId = radioPlayer.onStatusChanged((status, detail) => {\r\n            if (radioPlayer.station && this.props.station?.id == radioPlayer.station.id) // only change state, if we display details for the station playing\r\n                this.setState({\r\n                    status,\r\n                    detail\r\n                })\r\n        })\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        if (this.statusChangeId)\r\n            radioPlayer.offStatusChanged(this.statusChangeId)\r\n    }\r\n\r\n    async togglePlayback() {\r\n        if (!this.props.station)\r\n            return\r\n        const stat = this.getPlayStatus()\r\n        if (stat != \"play\") {\r\n            if (radioPlayer.station?.id != this.props.station.id)\r\n                await radioPlayer.setStation(this.props.station)\r\n            radioPlayer.play()\r\n        } else {\r\n            radioPlayer.pause()\r\n        }\r\n    }\r\n\r\n    getPlayStatus() {\r\n        let status = this.state.status // this can contain the last status updated by the player\r\n        if (this.props.station && this.props.station.id != radioPlayer.station?.id) {\r\n            status = \"stop\" // this stream hasn't been started\r\n        }\r\n        return status\r\n    }\r\n\r\n    render() {\r\n        const station = this.props.station;\r\n        if (!station) return null\r\n        let status = this.getPlayStatus()\r\n        \r\n        const buttonTextByStatus = {\r\n            play: \"Stop\",\r\n            stop: \"Play\",\r\n            load: \"Loading\",\r\n            error: `Error ${this.state.detail ?? \"\"}`\r\n        }\r\n        let playButtonText = buttonTextByStatus[status] ?? \"Error\"\r\n        let detailText:JSX.Element | undefined\r\n        if (this.state.detail) {\r\n        detailText = <span>{this.state.detail}</span>\r\n        }\r\n\r\n        return <div className={this.props.className}>\r\n                    <h2>{station.name}</h2>\r\n                    <p>in: {station.country}</p>\r\n                    <p>tags: {station.tags}</p>\r\n                    <div>\r\n                        <button onClick={e => this.togglePlayback()} >{playButtonText}</button> {/* toggle pause */}\r\n                        {detailText}\r\n                    </div>\r\n                    <div>\r\n                        <button>Add to favorites</button>\r\n                        <button>Vote!</button>\r\n                    </div>\r\n               </div>\r\n    }\r\n}","import { Howl } from \"howler\"\r\nimport { Station, getStreamUrl } from \"./radioSearch\"\r\n\r\nexport type StatusCallback = (status:string, detail?:string)=>any\r\n\r\nexport default class RadioPlayer {\r\n    player:Howl|undefined\r\n    station:Station|undefined\r\n    private statusEmitter:StatusCallback[] = []\r\n\r\n    async setStation(station:Station) {\r\n        // stop old player\r\n        if (this.player) {\r\n            this.player.off(); // remove old events, and stop\r\n            this.player.stop();\r\n            this.player.unload();\r\n        }\r\n        this.fireStatusChange(\"load\", \"station\")\r\n        this.station = station\r\n        // get station url ...\r\n        let url:string|undefined = await getStreamUrl(station)\r\n        if (!url) {\r\n            this.fireStatusChange(\"error\", \"cannot resolve station url\")\r\n        } else {\r\n\r\n            this.player = new Howl({src: url, autoplay: false, html5: true})\r\n            this.fireStatusChange(\"load\", \"stream\")\r\n            this.player.on('load', ()=> this.fireStatusChange(\"load\", \"start playing\"))\r\n            this.player.on('play', ()=> this.fireStatusChange(\"play\") )\r\n            this.player.on('stop', ()=> this.fireStatusChange(\"stop\") )\r\n            this.player.on('pause', ()=> this.fireStatusChange(\"stop\") )\r\n\r\n            this.player.on('loaderror', ()=> this.fireStatusChange(\"error\", \"loading the stream failed\"))\r\n            this.player.on('playerror', ()=> this.fireStatusChange(\"error\", \"playback error\"))\r\n        }\r\n    }\r\n\r\n    play() {\r\n        this?.player?.play()\r\n    }\r\n\r\n    pause() {\r\n        this?.player?.pause()\r\n    }\r\n\r\n    private fireStatusChange(newStatus:string, detail?:string) {\r\n        for (let cb of this.statusEmitter) {\r\n            cb(newStatus, detail)\r\n        }\r\n    }\r\n\r\n    onStatusChanged(cb: StatusCallback) {\r\n        this.statusEmitter.push(cb)\r\n        return cb\r\n    }\r\n\r\n    offStatusChanged(cb:StatusCallback) {\r\n        const idx = this.statusEmitter.findIndex(val => cb == val)\r\n        if (idx >= 0)\r\n            this.statusEmitter.splice(idx, 1)\r\n    }\r\n}","import React from 'react'\r\n\r\nexport default class About extends React.Component<{className:string}> {\r\n    render() {\r\n        return <div className={\"about \" + this.props.className} >\r\n            <h2>About</h2>\r\n            <p>\r\n                Open source webradio implementation using React. \r\n            </p>\r\n            <p>\r\n                Uses the api provided by <a href=\"http://www.radio-browser.info\">http://www.radio-browser.info</a>\r\n            </p>\r\n            <p>\r\n                If you find any issues, or have feature requests please report them at the project's github page: <a href=\"https://github.com/bxantus/webradio\">https://github.com/bxantus/webradio</a>\r\n            </p>\r\n        </div>\r\n    }\r\n}","import React from 'react';\r\nimport RadioSearch from './components/search'\r\nimport RadioPlayerUI, { radioPlayer } from './components/player'\r\nimport { Station } from './functions/radioSearch';\r\nimport About from './components/about';\r\n\r\ninterface RadioState {\r\n    selectedTab:string\r\n    selectedStation:Station|undefined\r\n}\r\n\r\ninterface Tab {\r\n    title: string\r\n    content: (cls:string) => JSX.Element\r\n}\r\n\r\nexport default class WebradioApp extends React.Component<{}, RadioState> {\r\n    state:RadioState = {\r\n        selectedTab: \"Search\",\r\n        selectedStation: {\r\n            id: 1,\r\n            name: \"X-id\",\r\n            tags: \"alternative, rock\",\r\n            country: \"iceland\",\r\n            language: \"\",\r\n            icon: \"\"\r\n        }\r\n    }\r\n\r\n    get tabs() {\r\n        return [\r\n            { title: \"Search\", content: (cls:string) => <RadioSearch className={cls} onStationSelected={station=> this.stationSelected(station)}>Search content</RadioSearch> },\r\n            { title: \"Favorites\", content: (cls:string) => <div className={cls}>My favorites</div> },\r\n            { title: \"Play\", content: (cls:string) => <RadioPlayerUI className={cls} station={this.state.selectedStation}></RadioPlayerUI> },\r\n            { title: \"About\", content: (cls:string) => <About className={cls} ></About>}\r\n        ]\r\n    }\r\n\r\n    changeTab(tab:Tab, userSelect=true)  {\r\n        this.setState({\r\n            selectedTab: tab.title\r\n        })\r\n        if (userSelect) {\r\n            this.setState({\r\n                selectedStation: radioPlayer.station\r\n            })\r\n        }\r\n    }\r\n\r\n    stationSelected(station:Station) {\r\n        this.setState({\r\n            selectedStation: station\r\n        })\r\n        this.changeTab(this.tabs[2], /*userSelect*/false)  \r\n    }\r\n\r\n    render() {\r\n        const tabs = this.tabs\r\n        const selectedTabName = this.state.selectedTab\r\n        const selectedTab = tabs.find(tab => tab.title === selectedTabName)\r\n        const headerContent = tabs.map(tab => <span className={tab === selectedTab ? \"tab selected\" : \"tab\"}\r\n                                                    key={tab.title} onClick={e=>this.changeTab(tab)} >{tab.title}</span> )\r\n        const tabElements = tabs.map(tab => tab.content(tab == selectedTab ? \"visible\" : \"hidden\"))\r\n        \r\n        return (\r\n            <div className=\"radio-App flexible vertical\">\r\n                <div className=\"tabs\">{headerContent}</div>\r\n                {tabElements}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport WebRadio from './webradio'\n\nReactDOM.render(\n  <React.StrictMode>\n    <WebRadio>my text</WebRadio>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}