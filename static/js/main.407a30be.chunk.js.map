{"version":3,"sources":["functions/radioSearch.ts","components/search.tsx","components/stationList.tsx","functions/lastPlayed.ts","functions/radioPlayer.ts","functions/favorites.ts","components/slider.tsx","models/base.ts","models/range.ts","components/player.tsx","components/about.tsx","webradio.tsx","index.tsx"],"names":["RadioSearch","query","offset","results","this","undefined","limit","url","apiUrl","name","fetch","then","res","json","map","r","id","stationuuid","tags","country","language","icon","favicon","votes","push","getStreamUrl","station","a","ok","currentSearch","StationList","stations","props","className","onClick","onStationSelected","key","React","Component","Search","searchTimer","searchList","state","search","searching","createRef","e","target","value","scheduleSearch","clearTimeout","setTimeout","setState","current","scrollTop","radioSearch","defaultValue","onInput","searchTextChanged","ref","saveLastPlayedStation","localStorage","setItem","JSON","stringify","LoadError","message","Error","RadioPlayer","player","statusEmitter","loading","_volume","off","stop","unload","fireStatusChange","loadPlayer","Howl","src","autoplay","html5","preload","on","_","error","playing","volume","play","newStatus","detail","cb","idx","findIndex","val","splice","vol","favorites","updateCbs","isFavorite","save","find","changed","stats","getItem","parse","ucb","Slider","valueChangeSub","posStartDrag","valStart","sliderBg","moveListener","onMouseMove","bind","upListener","onMouseUp","model","subscribe","unsubscribe","preventDefault","stopPropagation","sliderWidth","clientWidth","offs","clientX","change","max","min","window","addEventListener","capture","removeEventListener","left","style","top","width","height","position","onMouseDown","SubscriptionRepository","subs","Map","changeFunc","subsForName","get","length","set","sub","onChange","newVal","RangeModel","_min","_max","_val","updateValue","prop","add","notifyFor","radioPlayer","Player","status","statusChangeId","onStatusChanged","offStatusChanged","getPlayStatus","setStation","remove","detailText","playButtonText","load","getPlayDetail","togglePlayback","toggleFavorite","About","href","WebradioApp","selectedTab","onUpdated","lastPlayed","stat","getLastPlayedStation","stationSelected","tab","userSelect","title","selectedStation","changeTab","tabs","selectedTabName","headerContent","tabElements","content","cls","list","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.407a30be.chunk.js","sourcesContent":["\r\nexport interface Query {\r\n    name: string;\r\n    tags?: string;\r\n    limit?: number;\r\n}\r\n\r\nexport interface Station {\r\n    name: string\r\n    id: string,\r\n    tags: string,\r\n    country: string,\r\n    language: string,\r\n    icon: string,\r\n    votes: number,\r\n}\r\n\r\n// api docs at: https://api.radio-browser.info/\r\n// and https://de1.api.radio-browser.info/#Advanced_station_search\r\nexport class RadioSearch {\r\n    public query: Query\r\n    private offset = 0\r\n\r\n    results:Station[] = []\r\n    constructor(query: Query) {\r\n        this.query = query\r\n        if (this.query.limit == undefined)\r\n            this.query.limit = 20\r\n    }\r\n\r\n    async search() {\r\n        // compute url\r\n        let url = `${apiUrl}/stations/search?name=${this.query.name}&order=votes&reverse=true&limit=${this.query.limit}&offset=${this.offset}`\r\n        // do the stuff\r\n        let results = await fetch(url).then(res => res.json())\r\n        let res:Station[] = results.map(r =>({  name: r.name,\r\n                                                id: r.stationuuid,\r\n                                                tags: r.tags,\r\n                                                country: r.country,\r\n                                                language: r.language,\r\n                                                icon: r.favicon,\r\n                                                votes: r.votes,\r\n                                            }))\r\n        this.results.push(...res)\r\n    }\r\n}\r\n\r\nexport async function getStreamUrl(station:Station) {\r\n    var url = `${apiUrl}/url/${station.id}`;\r\n    var res = await fetch(url).then(res=>res.json())\r\n    if (res && res.ok)\r\n        return res.url as string;\r\n    else return undefined;\r\n}\r\n\r\nconst apiUrl = \"https://de1.api.radio-browser.info/json\" // todo: should do dns lookup as the docs ask","import React from 'react';\r\nimport { RadioSearch, Station } from '../functions/radioSearch';\r\nimport StationList from './stationList';\r\n\r\ninterface SearchState {\r\n    search: RadioSearch|undefined\r\n    searching:boolean\r\n}\r\n\r\ninterface SearchProps {\r\n    onStationSelected?:(station:Station)=> any\r\n    className?: string\r\n}\r\n\r\nlet currentSearch:RadioSearch|undefined // only one search active at a time\r\n\r\nexport default class Search extends React.Component<SearchProps, SearchState> {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            search: currentSearch,\r\n            searching: false\r\n        }\r\n        this.searchList = React.createRef<HTMLDivElement>()\r\n    }\r\n\r\n    async searchTextChanged(e) {\r\n        const query = e.target.value;\r\n        this.scheduleSearch(query)\r\n    }\r\n\r\n    private searchTimer\r\n    private searchList:React.RefObject<HTMLDivElement>\r\n\r\n    async scheduleSearch(query:string) {\r\n        this.searchTimer = clearTimeout(this.searchTimer)\r\n        this.searchTimer = setTimeout(async () => {\r\n            let search = new RadioSearch({name: query})\r\n            currentSearch = search\r\n            this.setState({searching: true})\r\n            await search.search()\r\n            // reset scroll\r\n            if (this.searchList.current) this.searchList.current.scrollTop = 0\r\n            this.setState({\r\n                search,\r\n                searching: false\r\n            })\r\n        }, 400)\r\n    }\r\n\r\n    render() {\r\n        const radioSearch = this.state.search; \r\n        let results:Station[]|undefined \r\n        if (radioSearch) {\r\n            results = radioSearch.results\r\n        }\r\n        let searching = this.state.searching ? <span className=\"loading\">Searching...</span> : undefined\r\n        return (\r\n            <div className={\"search flexible vertical \" + (this.props.className ?? \"\")}>\r\n                <div className=\"flexible horizontal\">\r\n                    <input className=\"flex1\" defaultValue={radioSearch ? radioSearch.query.name : \"\"} \r\n                      onInput={ (e) => { this.searchTextChanged(e) } }></input>\r\n                    {searching}\r\n                </div>\r\n                \r\n                <div ref={this.searchList} className=\"results scrollable\">\r\n                    <StationList stations={results} onStationSelected={this.props?.onStationSelected}></StationList>\r\n                </div>\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}","import React from \"react\"\r\nimport { Station } from \"../functions/radioSearch\";\r\n\r\ninterface StationsProps {\r\n    stations?: Station[]\r\n    onStationSelected?: (station:Station) => any\r\n}\r\n\r\nexport default class StationList extends React.Component<StationsProps, {}> {\r\n    render() {\r\n        const stations = this.props.stations;\r\n        if (stations) {\r\n            let results = stations.map(station => \r\n                                               <div className=\"clickable\" onClick={ () => this.props?.onStationSelected?.(station) } key={station.id}>\r\n                                                 <div className=\"flexible horizontal station-header\">\r\n                                                    <h3>{station.name}</h3>\r\n                                                    <span>{station.votes}</span>\r\n                                                 </div>\r\n                                                 <div>{station.tags}</div>\r\n                                                 <div>{station.country}</div>\r\n                                                 <hr></hr>\r\n                                               </div> )\r\n            return results\r\n        } else return null\r\n    }\r\n}","import { Station } from \"./radioSearch\";\r\n\r\nexport function getLastPlayedStation():Station | undefined {\r\n    const stat = localStorage.getItem(\"lastPlayed\")\r\n    if (stat)\r\n        return JSON.parse(stat) as Station\r\n}\r\n\r\nexport function saveLastPlayedStation(station:Station) {\r\n    localStorage.setItem(\"lastPlayed\", JSON.stringify(station))\r\n}","import { Howl } from \"howler\"\r\nimport { Station, getStreamUrl } from \"./radioSearch\"\r\nimport { saveLastPlayedStation } from \"./lastPlayed\"\r\n\r\nexport type StatusCallback = (status:string, detail?:string)=>any\r\n\r\nexport class LoadError extends Error{\r\n    constructor(message:string) {\r\n        super(message)\r\n        this.name = \"LoadError\"\r\n    }\r\n}\r\n\r\nexport default class RadioPlayer {\r\n    player:Howl|undefined\r\n    station:Station|undefined\r\n    private statusEmitter:StatusCallback[] = []\r\n    private loading:Promise<void>|undefined\r\n\r\n    async setStation(station:Station) {\r\n        // stop old player\r\n        if (this.player) {\r\n            this.player.off() // remove old events, and stop\r\n            this.player.stop()\r\n            this.player.unload()\r\n            this.player = undefined\r\n        }\r\n        this.fireStatusChange(\"load\", \"station\")\r\n        this.station = station\r\n        \r\n        saveLastPlayedStation(station)\r\n        // will save loading promise, as users may use play while station url is loading\r\n        // in these cases play should progress as well (see play)\r\n        this.loading = this.loadPlayer(station)\r\n        return this.loading\r\n    }\r\n\r\n    private async loadPlayer(station:Station) {\r\n        // get station url ...\r\n        let url = await getStreamUrl(station)\r\n        this.loading = undefined\r\n        if (!url) {\r\n            this.fireStatusChange(\"error\", \"cannot resolve station url\")\r\n            throw new LoadError(\"cannot resolve station url\")\r\n        } \r\n        if (this.station?.id == station.id) { // haven't changed stations meanwhile\r\n            if (this.player) {\r\n                this.player.off()\r\n                this.player.unload() // if somehow an old player gets stuck, unload it\r\n            }\r\n            this.player = new Howl({src: url, autoplay: false, html5: true, preload: false})\r\n            this.fireStatusChange(\"stop\")\r\n            this.player.on('load', ()=> this.fireStatusChange(\"load\", \"start playing\"))\r\n            this.player.on('play', ()=> this.fireStatusChange(\"play\") )\r\n            this.player.on('stop', ()=> this.fireStatusChange(\"stop\") )\r\n            this.player.on('pause', ()=> this.fireStatusChange(\"stop\") )\r\n\r\n            // NOTE: howl will fire load errors for radio streams, without extension, if you call the `load()` method\r\n            //       this is probably a bug? (as play will report no errors)\r\n            this.player.on('loaderror', (_, error)=> this.fireStatusChange(\"error\", \"loading the stream failed: \" + error))\r\n            this.player.on('playerror', (_, error)=> this.fireStatusChange(\"error\", \"playback error: \" + error))\r\n        } else {\r\n            throw new LoadError(\"changed stations while loading\")\r\n        }\r\n    }\r\n\r\n    async play() {\r\n        try {\r\n            if (this.loading)\r\n                await this.loading\r\n        } catch (err) {\r\n            if (err instanceof LoadError)\r\n                return; // can't play this stream\r\n            else throw err // rethrow other errors\r\n        }\r\n        \r\n        if (this.player && !this.player.playing()) {\r\n            // when not loaded\r\n            if (this.player.state() == \"unloaded\") {\r\n                this.fireStatusChange(\"load\", \"stream\")\r\n                // no need to use `load`, see the loadError remark. play will load the stream\r\n            }\r\n            this.player.volume(this._volume / 100)\r\n            this.player.play()\r\n        }\r\n    }\r\n\r\n    stop() {\r\n        if (this.player) {\r\n            this.player.stop()\r\n            this.player.unload() // preserve battery\r\n        }\r\n    }\r\n\r\n    private _volume:number = 100\r\n    // set the volume in 0 to 100 range\r\n    set volume(vol:number) {\r\n        this._volume = vol\r\n        if (this.player) {\r\n            this.player.volume(vol / 100) // howler works with 0 and 1 range\r\n        }\r\n    }\r\n\r\n    private fireStatusChange(newStatus:string, detail?:string) {\r\n        for (let cb of this.statusEmitter) {\r\n            cb(newStatus, detail)\r\n        }\r\n    }\r\n\r\n    onStatusChanged(cb: StatusCallback) {\r\n        this.statusEmitter.push(cb)\r\n        return cb\r\n    }\r\n\r\n    offStatusChanged(cb:StatusCallback) {\r\n        const idx = this.statusEmitter.findIndex(val => cb == val)\r\n        if (idx >= 0)\r\n            this.statusEmitter.splice(idx, 1)\r\n    }\r\n}","import { Station } from \"./radioSearch\";\r\n\r\nexport type UpdateCallback = () => any\r\n\r\n// uses localStorage to keep a list of favorite stations\r\nclass Favorites {\r\n    private stations:Station[] = []\r\n    \r\n    add(station:Station) {\r\n        if (!this.isFavorite(station)) {\r\n            this.stations.push(station)\r\n            this.save()\r\n        }\r\n    }\r\n\r\n    remove(station:Station) {\r\n        const idx = this.stations.findIndex(val => val.id == station.id)\r\n        if (idx >= 0) {\r\n            this.stations.splice(idx, 1)\r\n            this.save()\r\n        }\r\n    }\r\n\r\n    isFavorite(station:Station):boolean {\r\n        const stat = this.stations.find(val => val.id == station.id)\r\n        return stat != undefined\r\n    }\r\n\r\n    get list() {\r\n        return this.stations\r\n    }\r\n\r\n    private save() { // save to local storage\r\n        localStorage.setItem(\"stations\", JSON.stringify(this.stations))\r\n        this.changed()\r\n    }\r\n\r\n    load() { // load from local storage\r\n        let stats = localStorage.getItem(\"stations\")\r\n        if (stats) {\r\n            this.stations = JSON.parse(stats)\r\n            this.changed()\r\n        }\r\n    }\r\n    \r\n    private updateCbs:UpdateCallback[] = []\r\n    onUpdated(ucb:UpdateCallback):UpdateCallback {\r\n        this.updateCbs.push(ucb)\r\n        return ucb\r\n    }\r\n\r\n    private changed() {\r\n        for (const cb of this.updateCbs)\r\n            cb()\r\n    }\r\n}\r\n\r\nexport const favorites = new Favorites()","import React from \"react\"\r\nimport { RangeModel } from \"../models/range\"\r\nimport { Subscription } from \"../models/base\"\r\n\r\ninterface SliderProps {\r\n    model:RangeModel\r\n}\r\n\r\nexport class Slider extends React.Component<SliderProps> {\r\n    get model() { return this.props.model }\r\n    private valueChangeSub:Subscription|undefined\r\n\r\n    componentDidMount() {\r\n        this.valueChangeSub = this.model.subscribe(\"value\", () => {\r\n            this.setState({}) // value change, has to rerender\r\n        })\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        if (this.valueChangeSub) this.valueChangeSub.unsubscribe()\r\n    }\r\n\r\n    private posStartDrag = 0\r\n    private valStart = 0\r\n    private sliderBg = React.createRef<HTMLDivElement>()\r\n\r\n    onMouseMove(e:MouseEvent) {\r\n        if (this.sliderBg.current) {\r\n            e.preventDefault()\r\n            e.stopPropagation()\r\n            const sliderWidth = this.sliderBg.current.clientWidth // corresponds to change in range max - min\r\n            let offs = e.clientX - this.posStartDrag\r\n            if (sliderWidth > 0) {\r\n                let change = offs * (this.model.max - this.model.min) / sliderWidth\r\n                this.model.val = this.valStart + change // this will update the display automatically\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    private moveListener = this.onMouseMove.bind(this)\r\n    private upListener = this.onMouseUp.bind(this)\r\n\r\n    onMouseDown(e:React.MouseEvent) {\r\n        this.posStartDrag = e.clientX\r\n        window.addEventListener(\"mousemove\", this.moveListener, { capture: true})\r\n        window.addEventListener(\"mouseup\", this.upListener, { capture: true})\r\n        this.valStart = this.model.val\r\n    }\r\n\r\n    onMouseUp(e:MouseEvent) {\r\n        window.removeEventListener(\"mousemove\", this.moveListener, {capture:true})\r\n        window.removeEventListener(\"mouseup\", this.upListener, {capture:true})\r\n    }\r\n\r\n    render() {\r\n        let model = this.model;\r\n        const left = (model.val - model.min) * 100 / (model.max - model.min) // left pos in percentage\r\n\r\n        return <div className=\"slider bg\" ref={this.sliderBg}>\r\n                    <div style={ { left: `${left}%`, top:\"50%\", width:0, height:0, position:\"absolute\"  } }>\r\n                        <span className=\"thumb\" onMouseDown={e=>this.onMouseDown(e)} ></span>\r\n                    </div>\r\n               </div>\r\n    }\r\n}","export interface Subscription {\r\n    unsubscribe():void\r\n}\r\n\r\nexport interface Subscriber<T> {\r\n    onChange(newVal:T):void\r\n}\r\n\r\nexport class SubscriptionRepository {\r\n    add(name:string, changeFunc:(newVal:any) => void):Subscription {\r\n        let subsForName = this.subs.get(name) || []\r\n        if (subsForName.length == 0) {\r\n            this.subs.set(name, subsForName)\r\n        }\r\n\r\n        let sub = { onChange: changeFunc }\r\n        subsForName.push(sub)\r\n        return {\r\n            unsubscribe: () => {\r\n                const idx = subsForName.findIndex(val => val == sub)\r\n                if (idx >= 0) subsForName.splice(idx)\r\n            }\r\n        }\r\n    }\r\n\r\n    notifyFor(name:string, newVal:any) {\r\n        let subsForName = this.subs.get(name)\r\n        if (subsForName)\r\n            for (let s of subsForName) s.onChange(newVal)\r\n    }\r\n\r\n    private subs = new Map<string, Subscriber<any>[]>()\r\n}\r\n\r\n","import { Subscription, SubscriptionRepository } from \"./base\"\r\n\r\n// model reperesenting range and value \r\nexport class RangeModel { \r\n    private _min:number = 0\r\n    private _max:number = 100\r\n    private _val:number = 0\r\n    \r\n    get val():number { return this._val }\r\n    get min():number { return this._min }\r\n    get max():number { return this._max }\r\n\r\n    set val(newVal:number) {\r\n        if (newVal < this._min) newVal = this._min\r\n        else if (newVal > this._max) newVal = this._max\r\n        this.updateValue(newVal)\r\n    }\r\n\r\n    /// replace range, if min or max is not given the old values are used\r\n    setRange(min:number|undefined, max:number|undefined) {\r\n        if (min == undefined) min = this._min\r\n        if (max == undefined) max = this._max\r\n        if (min >= max) \r\n            throw new Error(`Invalid range! (min < max) should hold. Got: ${min} >= ${max}`)\r\n        this._min = min\r\n        this._max = max\r\n        if (this._val < min)\r\n            this.updateValue(min)\r\n        else if (this._val > max)\r\n            this.updateValue(max)\r\n    }\r\n\r\n    // subscribe for changes in value\r\n    subscribe(prop:\"value\", changeFunc:(v:number) => void):Subscription {\r\n        return this.subs.add(prop, changeFunc)\r\n    }\r\n\r\n    private updateValue(newVal:number) {\r\n        if (this._val != newVal) {\r\n            this._val = newVal\r\n            this.subs.notifyFor(\"value\", newVal)\r\n        }\r\n    }\r\n\r\n    private subs = new SubscriptionRepository()\r\n}\r\n","import React from \"react\"\r\nimport { Station } from \"../functions/radioSearch\"\r\nimport RadioPlayer, {StatusCallback, LoadError} from \"../functions/radioPlayer\"\r\nimport { favorites } from \"../functions/favorites\"\r\nimport { Slider } from \"./slider\"\r\nimport { RangeModel } from \"../models/range\"\r\n\r\nexport let radioPlayer = new RadioPlayer()\r\n\r\ninterface PlayerProps {\r\n    station:Station|undefined\r\n    className:string\r\n}\r\n\r\ninterface PlayerState {\r\n    status: string\r\n    detail?: string \r\n}\r\n\r\nexport default class Player extends React.Component<PlayerProps, PlayerState> {\r\n    state:PlayerState = {\r\n        status : \"stop\",\r\n        \r\n    }\r\n\r\n    private statusChangeId:StatusCallback|undefined\r\n    private volume = new RangeModel()\r\n    componentDidMount() {\r\n        this.statusChangeId = radioPlayer.onStatusChanged((status, detail) => {\r\n            if (radioPlayer.station && this.props.station?.id == radioPlayer.station.id) // only change state, if we display details for the station playing\r\n                this.setState({\r\n                    status,\r\n                    detail\r\n                })\r\n        });\r\n\r\n        this.volume.val = 75; // // todo: should use persisted value and set to radio player\r\n        this.volume.subscribe(\"value\", vol => radioPlayer.volume = vol)\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        if (this.statusChangeId)\r\n            radioPlayer.offStatusChanged(this.statusChangeId)\r\n    }\r\n\r\n    async togglePlayback() {\r\n        if (!this.props.station)\r\n            return\r\n        const stat = this.getPlayStatus()\r\n        if (stat != \"play\") {\r\n            try {\r\n                this.setState({status:\"load\", detail: undefined})\r\n                if (radioPlayer.station?.id != this.props.station.id)\r\n                    await radioPlayer.setStation(this.props.station)\r\n                radioPlayer.play()\r\n            } catch (loadErr) {\r\n                if (!(loadErr instanceof LoadError)) // no playback when loading fails. status change takes care of notifying the user\r\n                    throw loadErr\r\n            }\r\n        } else {\r\n            radioPlayer.stop()\r\n        }\r\n    }\r\n\r\n    getPlayStatus() {\r\n        let status = this.state.status // this can contain the last status updated by the player\r\n        if (this.props.station && this.props.station.id != radioPlayer.station?.id) {\r\n            status = \"stop\" // this stream hasn't been started\r\n        }\r\n        return status\r\n    }\r\n\r\n    getPlayDetail() {\r\n        if (this.props.station && this.props.station.id != radioPlayer.station?.id) \r\n            return undefined\r\n        else return this.state.detail\r\n    }\r\n\r\n    toggleFavorite() {\r\n        const station = this.props.station;\r\n        if (station) {\r\n            if (favorites.isFavorite(station)) favorites.remove(station)\r\n            else favorites.add(station)\r\n            this.setState({}) // needs update\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const station = this.props.station;\r\n        if (!station) return null\r\n        let status = this.getPlayStatus()\r\n        \r\n        const buttonTextByStatus = {\r\n            play: \"Stop\",\r\n            stop: \"Play\",\r\n            load: \"Loading\",\r\n            error: `Error ${this.state.detail ?? \"\"}`\r\n        }\r\n        let playButtonText = buttonTextByStatus[status] ?? \"Error\"\r\n        let detailText:JSX.Element | undefined\r\n        const detail = this.getPlayDetail()\r\n        if (detail) {\r\n            detailText = <span>{detail}</span>\r\n        }\r\n\r\n        return <div className={this.props.className}>\r\n                    <h2>{station.name}</h2>\r\n                    <p>in: {station.country}</p>\r\n                    <p>tags: {station.tags}</p>\r\n                    <div>\r\n                        <button onClick={e => this.togglePlayback()} >{playButtonText}</button> {/* toggle pause */}\r\n                        {detailText}\r\n                    </div>\r\n                    <div>\r\n                        <button onClick={()=> this.toggleFavorite()} >{favorites.isFavorite(station) ? \"Remove from favorites\" : \"Add to favorites\"}</button>\r\n                        <button>Vote!</button>\r\n                    </div>\r\n                    <Slider model={this.volume} ></Slider>\r\n               </div>\r\n    }\r\n}","import React from 'react'\r\n\r\nexport default class About extends React.Component<{className:string}> {\r\n    render() {\r\n        return <div className={\"about \" + this.props.className} >\r\n            <h2>About</h2>\r\n            <p>\r\n                Open source webradio implementation using React. \r\n            </p>\r\n            <p>\r\n                Uses the api provided by <a href=\"http://www.radio-browser.info\">http://www.radio-browser.info</a>\r\n            </p>\r\n            <p>\r\n                If you find any issues, or have feature requests please report them at the project's github page: <a href=\"https://github.com/bxantus/webradio\">https://github.com/bxantus/webradio</a>\r\n            </p>\r\n            <hr></hr>\r\n            <h3>Link for mobile devices:</h3>\r\n            <img src=\"/webradio/address_qr.png\"></img>\r\n        </div>\r\n    }\r\n}","import React from 'react';\r\nimport RadioSearch from './components/search'\r\nimport RadioPlayerUI, { radioPlayer } from './components/player'\r\nimport { Station } from './functions/radioSearch';\r\nimport About from './components/about';\r\nimport StationList from './components/stationList';\r\nimport { favorites } from './functions/favorites';\r\nimport { getLastPlayedStation } from './functions/lastPlayed';\r\n\r\ninterface RadioState {\r\n    selectedTab:string\r\n    selectedStation?:Station\r\n}\r\n\r\ninterface Tab {\r\n    title: string\r\n    content: (cls:string) => JSX.Element\r\n}\r\n\r\nexport default class WebradioApp extends React.Component<{}, RadioState> {\r\n    state:RadioState = {\r\n        selectedTab: \"Search\",\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        favorites.load();\r\n    }\r\n\r\n    componentDidMount() {\r\n        favorites.onUpdated(() => {\r\n            this.setState({}) // update\r\n        })\r\n        const lastPlayed = getLastPlayedStation()\r\n        if (lastPlayed) {\r\n            radioPlayer.setStation(lastPlayed)\r\n            this.stationSelected(lastPlayed) // switch to play tab\r\n        }\r\n    }\r\n\r\n    get tabs() {\r\n        return [\r\n            { title: \"Search\", content: (cls:string) => <RadioSearch className={cls} onStationSelected={station=> this.stationSelected(station)}>Search content</RadioSearch> },\r\n            { title: \"Favorites\", content: (cls:string) => <div className={\"scrollable \" + cls}><StationList stations={favorites.list} onStationSelected={station=> this.stationSelected(station)} ></StationList></div> },\r\n            { title: \"Play\", content: (cls:string) => <RadioPlayerUI className={cls} station={this.state.selectedStation}></RadioPlayerUI> },\r\n            { title: \"About\", content: (cls:string) => <About className={cls} ></About>}\r\n        ]\r\n    }\r\n\r\n    changeTab(tab:Tab, userSelect=true)  {\r\n        this.setState({\r\n            selectedTab: tab.title\r\n        })\r\n        if (userSelect) {\r\n            this.setState({\r\n                selectedStation: radioPlayer.station\r\n            })\r\n        }\r\n    }\r\n\r\n    stationSelected(station:Station) {\r\n        this.setState({\r\n            selectedStation: station\r\n        })\r\n        this.changeTab(this.tabs[2], /*userSelect*/false)  \r\n    }\r\n\r\n    render() {\r\n        const tabs = this.tabs\r\n        const selectedTabName = this.state.selectedTab\r\n        const selectedTab = tabs.find(tab => tab.title === selectedTabName)\r\n        const headerContent = tabs.map(tab => <span className={tab === selectedTab ? \"tab selected\" : \"tab\"}\r\n                                                    key={tab.title} onClick={e=>this.changeTab(tab)} >{tab.title}</span> )\r\n        const tabElements = tabs.map(tab => tab.content(tab == selectedTab ? \"visible\" : \"hidden\"))\r\n        \r\n        return (\r\n            <div className=\"radio-App flexible vertical\">\r\n                <div className=\"tabs\">{headerContent}</div>\r\n                {tabElements}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport WebRadio from './webradio'\n\nReactDOM.render(\n  <React.StrictMode>\n    <WebRadio>my text</WebRadio>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}