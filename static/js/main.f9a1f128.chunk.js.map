{"version":3,"sources":["components/stationList.tsx","components/search.tsx","functions/radioApi.ts","functions/lastPlayed.ts","models/base.ts","functions/radioPlayer.ts","functions/favorites.ts","components/slider.tsx","models/range.ts","components/player.tsx","components/about.tsx","webradio.tsx","functions/searchModel.ts","index.tsx"],"names":["StationList","stations","this","props","map","station","className","onClick","onStationSelected","key","id","name","tags","replace","country","length","src","votes","codec","bitrate","React","Component","Search","state","results","undefined","searching","search","subscribe","setState","res","document","scrollingElement","scrollTop","toStation","r","stationuuid","language","icon","favicon","RadioSearch","query","offset","_hasMoreResults","limit","url","apiUrl","fetch","then","json","push","getStreamUrl","a","refreshStation","voteForStation","ok","needsUpgrade","upgradeStation","refreshed","getLastPlayedStation","stat","localStorage","getItem","JSON","parse","saveLastPlayedStation","setItem","stringify","SubscriptionRepository","subs","Map","changeFunc","subsForName","get","set","sub","onChange","unsubscribe","idx","findIndex","val","splice","newVal","LoadError","message","Error","RadioPlayer","player","statusEmitter","loading","_volume","off","stop","unload","fireStatusChange","notifyFor","loadPlayer","Howl","autoplay","html5","preload","on","_","error","playing","volume","play","newStatus","detail","cb","prop","changeFn","add","vol","favorites","updateCbs","isFavorite","save","find","changed","stats","upgrades","Promise","all","ucb","Slider","valueChangeSub","posStartDrag","valStart","sliderBg","createRef","thumb","sliderProgress","dragging","moveListener","e","onPointerMove","upListener","onPointerUp","model","updateSliderStyles","current","setAttribute","trackSize","clientWidth","thumbWidth","pos","min","max","posCross","clientHeight","offs","clientX","change","window","addEventListener","removeEventListener","ref","onPointerDown","children","RangeModel","_min","_max","_val","updateValue","radioPlayer","Player","status","voting","statusChangeId","onStatusChanged","offStatusChanged","getPlayStatus","setStation","remove","buttonIcon","load","getPlayDetail","favoriteHeader","toggleFavorite","togglePlayback","vote","disabled","draggable","About","target","href","currentSearch","searchTimer","timeout","clearTimeout","setTimeout","hasMoreResults","WebradioApp","tabs","title","content","cls","list","stationSelected","selectedStation","searchTab","scrollOffset","searchInput","focusOnSearch","selectedTab","onUpdated","lastPlayed","tab","userSelect","changeTab","value","scheduleSearch","focus","tabTitles","selection","tabContent","concat","searchSelected","defaultValue","searchText","onInput","searchTextChanged","selectSearch","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.f9a1f128.chunk.js","sourcesContent":["import React from \"react\"\r\nimport { Station } from \"../functions/radioApi\";\r\n\r\ninterface StationsProps {\r\n    stations?: Station[]\r\n    onStationSelected?: (station:Station) => any\r\n}\r\n\r\n// tags are retrieved in a format split by commas, but no preceding space\r\nfunction formatTags(tags:string) {\r\n    return tags.replace(/,(?=[^\\s])/g, \", \")\r\n}\r\n\r\nfunction formatCountry(country:string) {\r\n    return country.length > 0 ? country : \"Unknown\"\r\n}\r\n\r\nexport default class StationList extends React.Component<StationsProps, {}> {\r\n    render() {\r\n        const stations = this.props.stations;\r\n        if (stations) {\r\n            let results = stations.map(station => \r\n                <div className=\"clickable station\" onClick={ () => this.props?.onStationSelected?.(station) } key={station.id}>\r\n                    <h3>{station.name}</h3>\r\n                    <div className=\"tags\">{formatTags(station.tags)}</div>\r\n                    <div className=\"flexible horizontal details\">\r\n                        <span className=\"country\">{formatCountry(station.country)}</span>\r\n                        <img className=\"votes\" src=\"/webradio/icons/votes.svg\"></img>\r\n                        <span className=\"flex1\">{station.votes}</span>\r\n                        <span className=\"codec\">{station.codec} - {station.bitrate} kbps</span>\r\n                    </div>\r\n                    <hr></hr>\r\n                </div> )\r\n            return results\r\n        } else return null\r\n    }\r\n}","import React from 'react';\r\nimport { Station } from '../functions/radioApi';\r\nimport SearchModel from '../functions/searchModel'\r\nimport StationList from './stationList';\r\n\r\ninterface SearchState {\r\n    results: Station[] | undefined\r\n    searching:boolean\r\n}\r\n\r\ninterface SearchProps {\r\n    onStationSelected?:(station:Station)=> any\r\n    className?: string\r\n    search:SearchModel\r\n}\r\n\r\nexport default class Search extends React.Component<SearchProps, SearchState> {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            results: undefined, // todo: get current results from SearchModel\r\n            searching: false\r\n        }\r\n    }\r\n\r\n    componentWillMount() {\r\n        const search = this.props.search\r\n        search.subscribe(\"searching\", (searching:boolean)=> {\r\n            this.setState({searching: searching})\r\n        })\r\n        search.subscribe(\"results\", (res:Station[])=> {\r\n            this.setState({results: res})\r\n        })\r\n        search.subscribe(\"query\", ()=> {\r\n            if (document.scrollingElement)\r\n                document.scrollingElement.scrollTop = 0\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const results = this.state.results\r\n        \r\n        // NOTE: based on `this.state.searching` we could present some searching progress\r\n        \r\n        return (\r\n            <div className={\"search flexible vertical \" + (this.props.className ?? \"\")}>\r\n                \r\n                <div className=\"results\">\r\n                    <StationList stations={results} onStationSelected={this.props?.onStationSelected}></StationList>\r\n                </div>\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}","\r\nexport interface Query {\r\n    name: string;\r\n    tags?: string;\r\n    limit?: number;\r\n}\r\n\r\nexport interface Station {\r\n    name: string\r\n    id: string,\r\n    tags: string,\r\n    country: string,\r\n    language: string,\r\n    icon: string,\r\n    votes: number,\r\n    // fields below are added to v1\r\n    codec:string,              \r\n    bitrate:number,            \r\n}\r\n\r\n/// station format from api.radio-browser\r\ninterface RadioStation { \r\n    /** A globally unique identifier for the change of the station information */\r\n    changeuuid:string,         \r\n    /**A globally unique identifier for the station */\r\n    stationuuid:string,        \r\n    /**  The name of the station */\r\n    name:string, \t           \r\n    /**  URL (HTTP/HTTPS) \tThe stream URL provided by the user*/\r\n    url:string,                \r\n    /** URL (HTTP/HTTPS) \tAn automatically \"resolved\" stream URL. Things resolved are playlists (M3U/PLS/ASX...), HTTP redirects (Code 301/302). This link is especially usefull if you use this API from a platform that is not able to do a resolve on its own (e.g. JavaScript in browser) or you just don't want to invest the time in decoding playlists yourself. */\r\n    url_resolved:string,       \r\n    /** URL (HTTP/HTTPS) \tURL to the homepage of the stream, so you can direct the user to a page with more information about the stream. */\r\n    homepage:string,           \r\n    /**  URL (HTTP/HTTPS) \tURL to an icon or picture that represents the stream. (PNG, JPG)*/\r\n    favicon:string,            \r\n    /** multivalue, split by comma \tTags of the stream with more information about it */\r\n    tags:string,               \r\n    /** DEPRECATED: use countrycode instead, full name of the country */ \r\n    country:string             \r\n    /** 2 letters, uppercase \tOfficial countrycodes as in ISO 3166-1 alpha-2 */\r\n    countrycode:string,        \r\n    /**  Full name of the entity where the station is located inside the country*/\r\n    state:string,              \r\n    /** multivalue, split by comma \tLanguages that are spoken in this stream. */\r\n    language:string,           \r\n    /** integer \tNumber of votes for this station. This number is by server and only ever increases. It will never be reset to 0. */\r\n    votes:number,              \r\n    /** datetime, YYYY-MM-DD HH:mm:ss \tLast time when the stream information was changed in the database */\r\n    lastchangetime:string,     \r\n    /** The codec of this stream recorded at the last check. */\r\n    codec:string,              \r\n    /** integer, bps \tThe bitrate of this stream recorded at the last check. */\r\n    bitrate:number,            \r\n    /** 0 or 1 \tMark if this stream is using HLS distribution or non-HLS. */\r\n    hls:number,                \r\n    /** 0 or 1 \tThe current online/offline state of this stream. This is a value calculated from multiple measure points in the internet. \r\n     * The test servers are located in different countries. It is a majority vote. */\r\n    lastcheckok: number        \r\n    /** datetime, YYYY-MM-DD HH:mm:ss \tThe last time when any radio-browser server checked the online state of this stream */\r\n    lastchecktime:string,      \r\n    /** datetime, YYYY-MM-DD HH:mm:ss \tThe last time when the stream was checked for the online status with a positive result */\r\n    lastcheckoktime:string,    \r\n    /** datetime, YYYY-MM-DD HH:mm:ss \tThe last time when this server checked the online state and the metadata of this stream */\r\n    lastlocalchecktime:string, \r\n    /** datetime, YYYY-MM-DD HH:mm:ss \tThe time of the last click recorded for this stream */\r\n    clicktimestamp:string,     \r\n    /** integer \tClicks within the last 24 hours */\r\n    clickcount:number,         \r\n    /** integer \tThe difference of the clickcounts within the last 2 days. Posivite values mean an increase, negative a decrease of clicks. */\r\n    clicktrend:number,         \r\n}\r\n\r\nfunction toStation(r:RadioStation):Station {\r\n    return {  name: r.name,\r\n              id: r.stationuuid,\r\n              tags: r.tags,\r\n              country: r.country,\r\n              language: r.language,\r\n              icon: r.favicon,\r\n              votes: r.votes,\r\n              codec: r.codec,\r\n              bitrate: r.bitrate\r\n    }\r\n}\r\n\r\n// api docs at: https://api.radio-browser.info/\r\n// and https://de1.api.radio-browser.info/#Advanced_station_search\r\nexport class RadioSearch {\r\n    public query: Query\r\n    private offset = 0\r\n    private _hasMoreResults = false\r\n\r\n    results:Station[] = []\r\n    constructor(query: Query) {\r\n        this.query = query\r\n        if (this.query.limit == undefined)\r\n            this.query.limit = 20\r\n    }\r\n\r\n    /// @return with the number of stations found\r\n    async search() {\r\n        // compute url\r\n        let url = `${apiUrl}/stations/search?name=${this.query.name}&order=votes&reverse=true&limit=${this.query.limit}&offset=${this.offset}`\r\n        // do the stuff\r\n        let results = await fetch(url).then(res => res.json())\r\n        let res:Station[] = results.map(toStation)\r\n        this.results.push(...res)\r\n        this.offset = this.results.length\r\n        this._hasMoreResults = res.length == this.query.limit // when fever results are returned, then no more results are available\r\n    }\r\n\r\n    get hasMoreResults() { return this._hasMoreResults }\r\n}\r\n\r\nexport async function getStreamUrl(station:Station) {\r\n    var url = `${apiUrl}/url/${station.id}`;\r\n    var res = await fetch(url).then(res=>res.json())\r\n    if (res && res.url)\r\n        return res.url as string;\r\n    else return undefined;\r\n}\r\n\r\nexport async function refreshStation(station:Station) {\r\n    var url = `${apiUrl}/stations/byuuid/${station.id}` // get info for this station only\r\n    var res = await fetch(url).then(res=>res.json())\r\n    // will return an array with one item\r\n    if (res && res[0]) {\r\n        return toStation(res[0])\r\n    }\r\n}\r\n\r\nexport async function voteForStation(station:Station) {\r\n    var url = `${apiUrl}/vote/${station.id}`; \r\n    // will return status of vote (in the ok field)\r\n    try {\r\n        var res = await fetch(url)\r\n        if (res.ok) {\r\n            res = await res.json()\r\n            return res.ok\r\n        } else return false\r\n    } catch (err) {\r\n        return false\r\n    }\r\n}\r\n\r\nconst apiUrl = \"https://de1.api.radio-browser.info/json\" // todo: should do dns lookup as the docs ask\r\n\r\nexport function needsUpgrade(station:Station) {\r\n    // from v0 to v1 (codec and bitrate added)\r\n    return station.codec == undefined || station.bitrate == undefined;\r\n}\r\n\r\nexport async function upgradeStation(station:Station) {\r\n    let refreshed = await refreshStation(station)\r\n    if (refreshed) {\r\n        station.codec = refreshed.codec;\r\n        station.bitrate = refreshed.bitrate;\r\n        // could refresh all fields but only these have been added\r\n        return true\r\n    }\r\n    return false\r\n}","import { Station, needsUpgrade, upgradeStation } from \"./radioApi\";\r\n\r\nexport async function getLastPlayedStation():Promise<Station | undefined> {\r\n    const stat = localStorage.getItem(\"lastPlayed\")\r\n    if (stat) {\r\n        let station:Station = JSON.parse(stat)\r\n        if (needsUpgrade(station))\r\n            await upgradeStation(station)\r\n        return station\r\n    }\r\n}\r\n\r\nexport function saveLastPlayedStation(station:Station) {\r\n    localStorage.setItem(\"lastPlayed\", JSON.stringify(station))\r\n}","export interface Subscription {\r\n    unsubscribe():void\r\n}\r\n\r\nexport interface Subscriber<T> {\r\n    onChange(newVal:T):void\r\n}\r\n\r\nexport class SubscriptionRepository {\r\n    // todo: add a generic getter function for the given properties, using T type\r\n    //       this will ensure users with correct types, and they don't have to type strings\r\n    // ex.: getSubscription<MyuSuperType>(\"alma\")\r\n    //      user codes could write: {  get onAlma() { return  this.subs.getSubscription<AlmaType>() } }\r\n\r\n    add(name:string, changeFunc:(newVal:any) => void):Subscription {\r\n        let subsForName = this.subs.get(name) || []\r\n        if (subsForName.length == 0) {\r\n            this.subs.set(name, subsForName)\r\n        }\r\n\r\n        let sub = { onChange: changeFunc }\r\n        subsForName.push(sub)\r\n        return {\r\n            unsubscribe: () => {\r\n                const idx = subsForName.findIndex(val => val == sub)\r\n                if (idx >= 0) subsForName.splice(idx)\r\n            }\r\n        }\r\n    }\r\n\r\n    notifyFor(name:string, newVal:any) {\r\n        let subsForName = this.subs.get(name)\r\n        if (subsForName)\r\n            for (let s of subsForName) s.onChange(newVal)\r\n    }\r\n\r\n    private subs = new Map<string, Subscriber<any>[]>()\r\n}\r\n\r\n","import { Howl } from \"howler\"\r\nimport { Station, getStreamUrl } from \"./radioApi\"\r\nimport { saveLastPlayedStation } from \"./lastPlayed\"\r\nimport { SubscriptionRepository } from \"../models/base\"\r\n\r\nexport type StatusCallback = (status:string, detail?:string)=>any\r\n\r\nexport class LoadError extends Error{\r\n    constructor(message:string) {\r\n        super(message)\r\n        this.name = \"LoadError\"\r\n    }\r\n}\r\n\r\nexport default class RadioPlayer {\r\n    player:Howl|undefined\r\n    station:Station|undefined\r\n    private statusEmitter:StatusCallback[] = [] // todo: replace usage with subs repo\r\n    private subs = new SubscriptionRepository()\r\n    private loading:Promise<void>|undefined\r\n\r\n    async setStation(station:Station) {\r\n        // stop old player\r\n        if (this.player) {\r\n            this.player.off() // remove old events, and stop\r\n            this.player.stop()\r\n            this.player.unload()\r\n            this.player = undefined\r\n        }\r\n        // todo: use subscription repository and notify about station change in the player\r\n        //       status change also should be fired through subs repo\r\n        this.fireStatusChange(\"load\", \"station\")\r\n        this.station = station\r\n        this.subs.notifyFor(\"station\", station)\r\n        \r\n        saveLastPlayedStation(station)\r\n        // will save loading promise, as users may use play while station url is loading\r\n        // in these cases play should progress as well (see play)\r\n        this.loading = this.loadPlayer(station)\r\n        return this.loading\r\n    }\r\n\r\n    private async loadPlayer(station:Station) {\r\n        // get station url ...\r\n        let url = await getStreamUrl(station)\r\n        this.loading = undefined\r\n        if (!url) {\r\n            this.fireStatusChange(\"error\", \"cannot resolve station url\")\r\n            throw new LoadError(\"cannot resolve station url\")\r\n        } \r\n        if (this.station?.id == station.id) { // haven't changed stations meanwhile\r\n            if (this.player) {\r\n                this.player.off()\r\n                this.player.unload() // if somehow an old player gets stuck, unload it\r\n            }\r\n            this.player = new Howl({src: url, autoplay: false, html5: true, preload: false})\r\n            this.fireStatusChange(\"stop\")\r\n            this.player.on('load', ()=> this.fireStatusChange(\"load\", \"start playing\"))\r\n            this.player.on('play', ()=> this.fireStatusChange(\"play\") )\r\n            this.player.on('stop', ()=> this.fireStatusChange(\"stop\") )\r\n            this.player.on('pause', ()=> this.fireStatusChange(\"stop\") )\r\n\r\n            // NOTE: howl will fire load errors for radio streams, without extension, if you call the `load()` method\r\n            //       this is probably a bug? (as play will report no errors)\r\n            this.player.on('loaderror', (_, error)=> this.fireStatusChange(\"error\", \"loading the stream failed: \" + error))\r\n            this.player.on('playerror', (_, error)=> this.fireStatusChange(\"error\", \"playback error: \" + error))\r\n        } else {\r\n            throw new LoadError(\"changed stations while loading\")\r\n        }\r\n    }\r\n\r\n    async play() {\r\n        try {\r\n            if (this.loading)\r\n                await this.loading\r\n        } catch (err) {\r\n            if (err instanceof LoadError)\r\n                return; // can't play this stream\r\n            else throw err // rethrow other errors\r\n        }\r\n        \r\n        if (this.player && !this.player.playing()) {\r\n            // when not loaded\r\n            if (this.player.state() == \"unloaded\") {\r\n                this.fireStatusChange(\"load\", \"stream\")\r\n                // no need to use `load`, see the loadError remark. play will load the stream\r\n            }\r\n            this.player.volume(this._volume / 100)\r\n            this.player.play()\r\n        }\r\n    }\r\n\r\n    stop() {\r\n        if (this.player) {\r\n            this.player.stop()\r\n            this.player.unload() // preserve battery\r\n        }\r\n    }\r\n\r\n    private _volume:number = 100\r\n    // set the volume in 0 to 100 range\r\n    set volume(vol:number) {\r\n        this._volume = vol\r\n        if (this.player) {\r\n            this.player.volume(vol / 100) // howler works with 0 and 1 range\r\n        }\r\n    }\r\n\r\n    private fireStatusChange(newStatus:string, detail?:string) {\r\n        for (let cb of this.statusEmitter) {\r\n            cb(newStatus, detail)\r\n        }\r\n    }\r\n\r\n    onStatusChanged(cb: StatusCallback) {\r\n        this.statusEmitter.push(cb)\r\n        return cb\r\n    }\r\n\r\n    offStatusChanged(cb:StatusCallback) {\r\n        const idx = this.statusEmitter.findIndex(val => cb == val)\r\n        if (idx >= 0)\r\n            this.statusEmitter.splice(idx, 1)\r\n    }\r\n\r\n    subscribe(prop: \"station\", changeFn:(newVal:any) => void) {\r\n        return this.subs.add(prop, changeFn)\r\n    }\r\n}","import { Station, needsUpgrade, upgradeStation } from \"./radioApi\";\r\n\r\nexport type UpdateCallback = () => any\r\n\r\n// uses localStorage to keep a list of favorite stations\r\nclass Favorites {\r\n    private stations:Station[] = []\r\n    \r\n    add(station:Station) {\r\n        if (!this.isFavorite(station)) {\r\n            this.stations.push(station)\r\n            this.save()\r\n        }\r\n    }\r\n\r\n    remove(station:Station) {\r\n        const idx = this.stations.findIndex(val => val.id == station.id)\r\n        if (idx >= 0) {\r\n            this.stations.splice(idx, 1)\r\n            this.save()\r\n        }\r\n    }\r\n\r\n    isFavorite(station:Station):boolean {\r\n        const stat = this.stations.find(val => val.id == station.id)\r\n        return stat != undefined\r\n    }\r\n\r\n    get list() {\r\n        return this.stations\r\n    }\r\n\r\n    private save() { // save to local storage\r\n        localStorage.setItem(\"stations\", JSON.stringify(this.stations))\r\n        this.changed()\r\n    }\r\n\r\n    async load() { // load from local storage\r\n        let stats = localStorage.getItem(\"stations\")\r\n        if (stats) {\r\n            let stations:Station[] = JSON.parse(stats)\r\n            // check for upgrades\r\n            let upgrades:Promise<boolean>[] = []\r\n            for (let station of stations) {\r\n                if (needsUpgrade(station)) {\r\n                    upgrades.push(upgradeStation(station))\r\n                }\r\n            }\r\n            try {\r\n                if (upgrades.length) {\r\n                    await Promise.all(upgrades)\r\n                    this.stations = stations\r\n                    this.save() // save upgraded stations, so next time they don't have to be upgraded\r\n                }\r\n            } finally {\r\n                if (this.stations != stations) {\r\n                    this.stations = stations\r\n                    this.changed()\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    private updateCbs:UpdateCallback[] = []\r\n    onUpdated(ucb:UpdateCallback):UpdateCallback {\r\n        this.updateCbs.push(ucb)\r\n        return ucb\r\n    }\r\n\r\n    private changed() {\r\n        for (const cb of this.updateCbs)\r\n            cb()\r\n    }\r\n}\r\n\r\nexport const favorites = new Favorites()","import React from \"react\"\r\nimport { RangeModel } from \"../models/range\"\r\nimport { Subscription } from \"../models/base\"\r\n\r\ninterface SliderProps {\r\n    model:RangeModel\r\n}\r\n\r\nexport class Slider extends React.Component<SliderProps> {\r\n    get model() { return this.props.model }\r\n    private valueChangeSub:Subscription|undefined\r\n\r\n    componentDidMount() {\r\n        this.valueChangeSub = this.model.subscribe(\"value\", () => {\r\n            this.updateSliderStyles() // update thumb and progress pos\r\n        })\r\n        \r\n        this.setState({}) // trigger a refresh, so refs get sizes\r\n        if (this.thumb.current) {\r\n            this.thumb.current.setAttribute(\"touch-action\",  \"none\") // in order for the pointerEvent polyfill to work\r\n        }\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        this.updateSliderStyles() // style refresh\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        if (this.valueChangeSub) this.valueChangeSub.unsubscribe()\r\n    }\r\n\r\n    private updateSliderStyles() {\r\n        if (this.sliderBg.current && this.thumb.current) {\r\n            let model = this.model;\r\n            const trackSize = this.sliderBg.current.clientWidth - this.thumb.current.clientWidth\r\n            const thumbWidth = this.thumb.current.clientWidth\r\n            let pos = (model.val - model.min) * trackSize / (model.max - model.min) // left pos on track\r\n            let posCross = -(this.thumb.current.clientHeight - this.sliderBg.current.clientHeight) / 2;\r\n            this.thumb.current.setAttribute(\"style\", `left: ${pos}px; top:${posCross}px`)\r\n            if (this.sliderProgress.current) {\r\n                this.sliderProgress.current.setAttribute(\"style\", `width: ${pos + thumbWidth / 2}px`)\r\n            }\r\n        }\r\n    }\r\n\r\n    private posStartDrag = 0\r\n    private valStart = 0\r\n    private sliderBg = React.createRef<HTMLDivElement>()\r\n    private thumb = React.createRef<HTMLSpanElement>()\r\n    private sliderProgress = React.createRef<HTMLDivElement>()\r\n    private dragging = false\r\n\r\n    onPointerMove(e:MouseEvent) {\r\n        if (this.dragging && this.sliderBg.current && this.thumb.current) {\r\n            \r\n            const trackSize = this.sliderBg.current.clientWidth - this.thumb.current.clientWidth // corresponds to change in range max - min\r\n            let offs = e.clientX - this.posStartDrag\r\n            if (trackSize > 0) {\r\n                let change = offs * (this.model.max - this.model.min) / trackSize\r\n                this.model.val = this.valStart + change // this will update the display automatically\r\n            }\r\n        }\r\n    }\r\n\r\n    moveListener = (e:MouseEvent) => this.onPointerMove(e)\r\n    upListener = (e:MouseEvent) => this.onPointerUp(e)\r\n\r\n    onPointerDown(e:React.MouseEvent) {\r\n        // todo: check button/finger here\r\n        this.posStartDrag = e.clientX\r\n        this.valStart = this.model.val;\r\n        this.dragging = true\r\n        window.addEventListener(\"pointermove\", this.moveListener)\r\n        window.addEventListener(\"pointerup\", this.upListener)\r\n    }\r\n\r\n    onPointerUp(e:MouseEvent) {\r\n        this.dragging = false\r\n        window.removeEventListener(\"mousemove\", this.moveListener)\r\n        window.removeEventListener(\"mouseup\", this.upListener)\r\n    }\r\n\r\n    render() {\r\n        return <div className=\"slider bg\" ref={this.sliderBg}>\r\n                    <div className=\"slider progress\" ref={this.sliderProgress}></div>\r\n                    <span className=\"thumb\" ref={this.thumb} \r\n                          onPointerDown={e=>this.onPointerDown(e)}>\r\n                        {this.props.children}\r\n                    </span>\r\n               </div>\r\n    }\r\n}","import { Subscription, SubscriptionRepository } from \"./base\"\r\n\r\n// model reperesenting range and value \r\nexport class RangeModel { \r\n    private _min:number = 0\r\n    private _max:number = 100\r\n    private _val:number = 0\r\n    \r\n    get val():number { return this._val }\r\n    get min():number { return this._min }\r\n    get max():number { return this._max }\r\n\r\n    set val(newVal:number) {\r\n        if (newVal < this._min) newVal = this._min\r\n        else if (newVal > this._max) newVal = this._max\r\n        this.updateValue(newVal)\r\n    }\r\n\r\n    /// replace range, if min or max is not given the old values are used\r\n    setRange(min:number|undefined, max:number|undefined) {\r\n        if (min == undefined) min = this._min\r\n        if (max == undefined) max = this._max\r\n        if (min >= max) \r\n            throw new Error(`Invalid range! (min < max) should hold. Got: ${min} >= ${max}`)\r\n        this._min = min\r\n        this._max = max\r\n        if (this._val < min)\r\n            this.updateValue(min)\r\n        else if (this._val > max)\r\n            this.updateValue(max)\r\n    }\r\n\r\n    // subscribe for changes in value\r\n    subscribe(prop:\"value\", changeFunc:(v:number) => void):Subscription {\r\n        return this.subs.add(prop, changeFunc)\r\n    }\r\n\r\n    private updateValue(newVal:number) {\r\n        if (this._val != newVal) {\r\n            this._val = newVal\r\n            this.subs.notifyFor(\"value\", newVal)\r\n        }\r\n    }\r\n\r\n    private subs = new SubscriptionRepository()\r\n}\r\n","import React from \"react\"\r\nimport { Station, voteForStation, refreshStation } from \"../functions/radioApi\"\r\nimport RadioPlayer, {StatusCallback, LoadError} from \"../functions/radioPlayer\"\r\nimport { favorites } from \"../functions/favorites\"\r\nimport { Slider } from \"./slider\"\r\nimport { RangeModel } from \"../models/range\"\r\n\r\nexport let radioPlayer = new RadioPlayer()\r\n\r\ninterface PlayerProps {\r\n    station:Station|undefined\r\n    className:string\r\n}\r\n\r\ninterface PlayerState {\r\n    status: string\r\n    detail?: string \r\n    voting: boolean\r\n}\r\n\r\nexport default class Player extends React.Component<PlayerProps, PlayerState> {\r\n    state:PlayerState = {\r\n        status : \"stop\",\r\n        voting: false\r\n    }\r\n\r\n    private statusChangeId:StatusCallback|undefined\r\n    private volume = new RangeModel()\r\n    componentDidMount() {\r\n        this.statusChangeId = radioPlayer.onStatusChanged((status, detail) => {\r\n            if (radioPlayer.station && this.props.station?.id == radioPlayer.station.id) // only change state, if we display details for the station playing\r\n                this.setState({\r\n                    status,\r\n                    detail\r\n                })\r\n        });\r\n\r\n        this.volume.val = 75; // // todo: should use persisted value and set to radio player\r\n        this.volume.subscribe(\"value\", vol => radioPlayer.volume = vol)\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        if (this.statusChangeId)\r\n            radioPlayer.offStatusChanged(this.statusChangeId)\r\n    }\r\n\r\n    async togglePlayback() {\r\n        if (!this.props.station)\r\n            return\r\n        const stat = this.getPlayStatus()\r\n        if (stat != \"play\") {\r\n            try {\r\n                this.setState({status:\"load\", detail: undefined})\r\n                if (radioPlayer.station?.id != this.props.station.id)\r\n                    await radioPlayer.setStation(this.props.station)\r\n                radioPlayer.play()\r\n            } catch (loadErr) {\r\n                if (!(loadErr instanceof LoadError)) // no playback when loading fails. status change takes care of notifying the user\r\n                    throw loadErr\r\n            }\r\n        } else {\r\n            radioPlayer.stop()\r\n        }\r\n    }\r\n\r\n    getPlayStatus() {\r\n        let status = this.state.status // this can contain the last status updated by the player\r\n        if (this.props.station && this.props.station.id != radioPlayer.station?.id) {\r\n            status = \"stop\" // this stream hasn't been started\r\n        }\r\n        return status\r\n    }\r\n\r\n    getPlayDetail() {\r\n        if (this.props.station && this.props.station.id != radioPlayer.station?.id) \r\n            return undefined\r\n        else return this.state.detail\r\n    }\r\n\r\n    toggleFavorite() {\r\n        const station = this.props.station;\r\n        if (station) {\r\n            if (favorites.isFavorite(station)) favorites.remove(station)\r\n            else favorites.add(station)\r\n            this.setState({}) // needs update\r\n        }\r\n    }\r\n\r\n    async vote() {\r\n        if (!this.props.station) return\r\n        this.setState({voting: true})\r\n        const succ = await voteForStation(this.props.station)\r\n        \r\n        const refreshed = await refreshStation(this.props.station)\r\n        if (refreshed) {\r\n            this.props.station.votes = refreshed.votes\r\n        }\r\n        \r\n        this.setState({voting: false}) \r\n    }\r\n\r\n    render() {\r\n        const station = this.props.station;\r\n        if (!station) return null\r\n        let status = this.getPlayStatus()\r\n        \r\n        const iconsForStatus = {\r\n            play: \"stop.svg\",\r\n            stop: \"play.svg\",\r\n            load: \"loading.svg\",\r\n        }\r\n\r\n        const buttonIcon =  status != \"error\" ? `/webradio/icons/${iconsForStatus[status]}` : \"\";  \r\n        const detail = this.getPlayDetail()\r\n        \r\n\r\n        const isFavorite = favorites.isFavorite(station)\r\n        const favoriteHeader = isFavorite\r\n                                    ? (<span>\r\n                                          <img className=\"small-ico like\" src=\"/webradio/icons/like.svg\"></img>\r\n                                          Favorite\r\n                                       </span>\r\n                                      )\r\n                                    : undefined;\r\n\r\n        return <div className={this.props.className + \" flexible vertical player\"}>\r\n                    <div className=\"player-header flexible horizontal\">\r\n                        <span>{station.country}</span>\r\n                        <span>\r\n                            <img className=\"small-ico\" src=\"/webradio/icons/votes.svg\"></img>\r\n                            {station.votes}\r\n                        </span>\r\n                        {favoriteHeader}\r\n                    </div>\r\n                    <h2 className=\"title\">{station.name}</h2>\r\n                    <p className=\"tags\">{station.tags}</p>\r\n                    <button className=\"favorite-toggle\" onClick={()=> this.toggleFavorite()} >\r\n                        <img className=\"small-ico like\" src={isFavorite ? \"/webradio/icons/unlike.svg\" : \"/webradio/icons/like.svg\"}></img>\r\n                        <span className=\"text\">{isFavorite ? \"Remove Favorite\" : \"Add as Favorite\"}</span>\r\n                    </button>\r\n                    <div className=\"play-area\">\r\n                        <button className=\"play\" onClick={e => this.togglePlayback()} >\r\n                            <img className={`play-ico ${status}`} src={buttonIcon}></img>\r\n                        </button> \r\n                        {\r\n                            // todo: add overlay for error messages\r\n                        }\r\n                    </div>\r\n                    <div className=\"flexible horizontal play-footer\">\r\n                        <span className=\"flex1\">{station.codec} - {station.bitrate} kbps</span>\r\n                        <button className=\"vote\" onClick={()=> this.vote() }disabled={this.state.voting} >\r\n                            <img className=\"small-ico\" src=\"/webradio/icons/votes.svg\"></img>\r\n                            Vote\r\n                        </button> \r\n                    </div>\r\n                    \r\n                    <Slider model={this.volume} >\r\n                        <img className=\"volume\" src=\"/webradio/icons/volume.svg\" draggable=\"false\"></img>\r\n                    </Slider>\r\n               </div>\r\n    }\r\n}","import React from 'react'\r\n\r\nexport default class About extends React.Component<{className:string}> {\r\n    render() {\r\n        return <div className={\"about \" + this.props.className} >\r\n            <h2>About webradio</h2>\r\n            <p>\r\n                Open source webradio implementation using React. \r\n            </p>\r\n            <p>\r\n                Uses the api provided by <a target=\"blank\" href=\"http://www.radio-browser.info\">www.radio-browser.info</a>\r\n            </p>\r\n            <p>\r\n                If you find any issues, or have feature requests please report them at the project's github page: <a href=\"https://github.com/bxantus/webradio\" target=\"blank\">github.com/bxantus/webradio</a>\r\n            </p>\r\n            <a href=\"https://bxantus.github.io/webradio/index.html\">\r\n                <img className=\"qr-code\" src=\"/webradio/address_qr.png\"></img>\r\n            </a>\r\n            <h4>Link for mobile devices:</h4>\r\n            <p className=\"small-margin\">\r\n                Scan the code to the right on a mobile phone to open webradio on it!\r\n            </p>\r\n        </div>\r\n    }\r\n}","import React from 'react';\r\nimport RadioSearch from './components/search'\r\nimport RadioPlayerUI, { radioPlayer } from './components/player'\r\nimport { Station } from './functions/radioApi';\r\nimport About from './components/about';\r\nimport StationList from './components/stationList';\r\nimport { favorites } from './functions/favorites';\r\nimport { getLastPlayedStation } from './functions/lastPlayed';\r\nimport SearchModel from './functions/searchModel'\r\n\r\ninterface RadioState {\r\n    selectedTab:Tab\r\n    selectedStation?:Station\r\n}\r\n\r\ninterface Tab {\r\n    title: string\r\n    content: (cls:string) => JSX.Element\r\n    scrollOffset?:number\r\n}\r\n\r\nlet currentSearch= new SearchModel\r\n\r\nexport default class WebradioApp extends React.Component<{}, RadioState> {\r\n    state:RadioState \r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            selectedTab: this.searchTab, // todo: by default we could start with the about (help) tab\r\n        }\r\n        favorites.load();\r\n    }\r\n\r\n    async componentDidMount() {\r\n        favorites.onUpdated(() => {\r\n            this.setState({}) // update\r\n        })\r\n        radioPlayer.subscribe(\"station\", (station:Station) => {\r\n            this.setState({}) // update display of currently playing station\r\n        })\r\n        const lastPlayed = await getLastPlayedStation()\r\n        if (lastPlayed) {\r\n            radioPlayer.setStation(lastPlayed)\r\n            this.stationSelected(lastPlayed) // switch to play tab\r\n        }\r\n    }\r\n\r\n    tabs = [\r\n        { title: \"Favorites\", content: (cls:string) => <div className={cls}><StationList stations={favorites.list} onStationSelected={station=> this.stationSelected(station)} ></StationList></div> },\r\n        { title: \"Playing\", content: (cls:string) => <RadioPlayerUI className={cls} station={this.state.selectedStation}></RadioPlayerUI> },\r\n        { title: \"About\", content: (cls:string) => <About className={cls} ></About>},\r\n    ]\r\n    \r\n\r\n    private searchTab:Tab = { \r\n                              title: \"Search\", \r\n                              content: (cls:string) => <RadioSearch className={cls} search={currentSearch} onStationSelected={station=> this.stationSelected(station)}>Search content</RadioSearch>,\r\n                              scrollOffset: 0\r\n                            }\r\n\r\n\r\n    changeTab(tab:Tab, userSelect=true)  {\r\n        this.state.selectedTab.scrollOffset = document.scrollingElement?.scrollTop ?? 0 // save scroll offset\r\n        this.setState({\r\n            selectedTab: tab\r\n        })\r\n        if (userSelect) {\r\n            this.setState({\r\n                selectedStation: radioPlayer.station\r\n            })\r\n        }\r\n    }\r\n\r\n    stationSelected(station:Station) {\r\n        this.setState({\r\n            selectedStation: station\r\n        })\r\n        // todo: should use rather tab id\r\n        this.changeTab(this.tabs[1], /*userSelect*/false)  \r\n    }\r\n\r\n    searchTextChanged(e) {\r\n        const query = e.target.value;\r\n        currentSearch.scheduleSearch(query)\r\n    }\r\n\r\n    private searchInput = React.createRef<HTMLInputElement>()\r\n    private focusOnSearch = false\r\n    selectSearch() {\r\n        this.changeTab(this.searchTab)\r\n        this.focusOnSearch = true\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        if (this.focusOnSearch && this.searchInput.current) {\r\n            this.searchInput.current.focus()\r\n            this.focusOnSearch = false\r\n        }\r\n        if (document.scrollingElement) {\r\n            if (this.state.selectedTab == this.searchTab) {\r\n                document.scrollingElement.scrollTop = this.searchTab.scrollOffset ?? 0 // preserve search scroll\r\n            } else document.scrollingElement.scrollTop = 0 // on other views reset scroll\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const tabs = this.tabs\r\n        const selectedTab = this.state.selectedTab\r\n        \r\n        const tabTitles = tabs.map(tab => {\r\n                    let selection = (selectedTab == tab) ? <span className=\"selection\"></span> : undefined\r\n                    return <div className=\"tab flexible vertical\"\r\n                               key={tab.title} onClick={e=>this.changeTab(tab)} >\r\n                                    <span className=\"title\">{tab.title}</span>\r\n                                    {selection}\r\n                           </div> \r\n        })\r\n        const allTabs = [this.searchTab].concat(tabs)\r\n        const tabContent = allTabs.map(tab => tab.content(tab == selectedTab ? \"visible\" : \"hidden\"))\r\n        const searchSelected = this.searchTab == selectedTab;\r\n        \r\n        return (\r\n            <div className=\"radio-App\">\r\n                <div id=\"top\" className=\"flexible vertical radio\">\r\n                    <div className=\"header flexible horizontal\">\r\n                        <img className=\"logo\" src=\"/webradio/logo.svg\"></img>\r\n                        <span className={`divider ${searchSelected ? \"blinking\" : \"static\"}`}></span>\r\n                        <span className={`currently-playing ${searchSelected ? \"hidden\" : \"visible\"}`}>\r\n                            {radioPlayer.station?.name}\r\n                        </span>\r\n                        <input className={`search flex1 ${searchSelected ? \"visible\" : \"hidden\"}`} \r\n                            ref={this.searchInput}\r\n                            defaultValue={currentSearch.searchText} \r\n                            onInput={ (e) => { this.searchTextChanged(e) } }>\r\n                        </input>\r\n                    </div>\r\n                    <div className=\"tabs flexible horizontal\">\r\n                        <span className=\"flex1\"></span>\r\n                        {tabTitles}\r\n                        <span className=\"flex1\"></span>\r\n                        <a className=\"search-tab\" onClick={e=> this.selectSearch()}>\r\n                            <img className=\"icon search\" src=\"/webradio/icons/search.svg\"></img>\r\n                        </a>\r\n                    </div>\r\n                </div>\r\n                <div id=\"content\" className=\"radio flexible vertical\">\r\n                    {tabContent}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import { RadioSearch } from \"./radioApi\";\r\nimport { SubscriptionRepository, Subscription } from \"../models/base\";\r\n\r\n\r\nexport default class Search  {\r\n    private subs = new SubscriptionRepository()\r\n    private searchTimer\r\n    private currentSearch:RadioSearch|undefined\r\n\r\n    get searchText() {\r\n        return this.currentSearch ? this.currentSearch.query.name : \"\"\r\n    }\r\n\r\n    async scheduleSearch(query:string, timeout = 400) {\r\n        this.searchTimer = clearTimeout(this.searchTimer)\r\n        this.searchTimer = setTimeout(async () => {\r\n            let search = new RadioSearch({name: query})\r\n            this.currentSearch = search\r\n            this.subs.notifyFor(\"searching\", true)\r\n            await search.search()\r\n            this.subs.notifyFor(\"query\", undefined) // search query changed\r\n            this.subs.notifyFor(\"searching\", false)\r\n            this.subs.notifyFor(\"results\", search.results)\r\n        }, timeout)\r\n    }\r\n\r\n    async loadMoreResults() {\r\n        if (this.currentSearch && this.currentSearch.hasMoreResults) {\r\n            this.subs.notifyFor(\"searching\", true)\r\n            await this.currentSearch.search()\r\n            this.subs.notifyFor(\"searching\", false)\r\n            this.subs.notifyFor(\"results\", this.currentSearch.results)\r\n        }\r\n    }\r\n\r\n    subscribe(prop: \"searching\" | \"results\" | \"query\", changeFunc:(newVal:any) => void):Subscription {\r\n        return this.subs.add(prop, changeFunc)\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport WebRadio from './webradio'\n\nReactDOM.render(\n  <React.StrictMode>\n    <WebRadio>my text</WebRadio>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}