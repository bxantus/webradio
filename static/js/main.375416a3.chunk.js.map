{"version":3,"sources":["functions/radioSearch.ts","components/search.tsx","components/stationList.tsx","functions/radioPlayer.ts","functions/favorites.ts","components/player.tsx","components/about.tsx","webradio.tsx","index.tsx"],"names":["RadioSearch","query","offset","results","this","undefined","limit","url","apiUrl","name","fetch","then","res","json","map","r","id","stationuuid","tags","country","language","icon","favicon","votes","push","getStreamUrl","station","a","ok","currentSearch","StationList","stations","props","onClick","onStationSelected","key","React","Component","Search","searchTimer","searchList","state","search","searching","createRef","e","target","value","scheduleSearch","clearTimeout","setTimeout","setState","current","scrollTop","radioSearch","className","defaultValue","onInput","searchTextChanged","style","flex","ref","RadioPlayer","player","statusEmitter","off","stop","unload","fireStatusChange","Howl","src","autoplay","html5","on","play","pause","newStatus","detail","cb","idx","findIndex","val","splice","favorites","updateCbs","isFavorite","save","find","localStorage","setItem","JSON","stringify","changed","stats","getItem","parse","ucb","radioPlayer","Player","status","statusChangeId","onStatusChanged","offStatusChanged","getPlayStatus","setStation","remove","add","detailText","playButtonText","load","error","togglePlayback","toggleFavorite","About","href","WebradioApp","selectedTab","selectedStation","onUpdated","tab","userSelect","title","changeTab","tabs","selectedTabName","headerContent","tabElements","content","cls","stationSelected","list","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.375416a3.chunk.js","sourcesContent":["\r\nexport interface Query {\r\n    name: string;\r\n    tags?: string;\r\n    limit?: number;\r\n}\r\n\r\nexport interface Station {\r\n    name: string\r\n    id: string,\r\n    tags: string,\r\n    country: string,\r\n    language: string,\r\n    icon: string,\r\n    votes: number,\r\n}\r\n\r\n// api docs at: https://api.radio-browser.info/\r\n// and https://de1.api.radio-browser.info/#Advanced_station_search\r\nexport class RadioSearch {\r\n    public query: Query\r\n    private offset = 0\r\n\r\n    results:Station[] = []\r\n    constructor(query: Query) {\r\n        this.query = query\r\n        if (this.query.limit == undefined)\r\n            this.query.limit = 20\r\n    }\r\n\r\n    async search() {\r\n        // compute url\r\n        let url = `${apiUrl}/stations/search?name=${this.query.name}&order=votes&reverse=true&limit=${this.query.limit}&offset=${this.offset}`\r\n        // do the stuff\r\n        let results = await fetch(url).then(res => res.json())\r\n        let res:Station[] = results.map(r =>({  name: r.name,\r\n                                                id: r.stationuuid,\r\n                                                tags: r.tags,\r\n                                                country: r.country,\r\n                                                language: r.language,\r\n                                                icon: r.favicon,\r\n                                                votes: r.votes,\r\n                                            }))\r\n        this.results.push(...res)\r\n    }\r\n}\r\n\r\nexport async function getStreamUrl(station:Station) {\r\n    var url = `${apiUrl}/url/${station.id}`;\r\n    var res = await fetch(url).then(res=>res.json())\r\n    if (res && res.ok)\r\n        return res.url as string;\r\n    else return undefined;\r\n}\r\n\r\nconst apiUrl = \"https://de1.api.radio-browser.info/json\" // todo: should do dns lookup as the docs ask","import React from 'react';\r\nimport { RadioSearch, Station } from '../functions/radioSearch';\r\nimport StationList from './stationList';\r\n\r\ninterface SearchState {\r\n    search: RadioSearch|undefined\r\n    searching:boolean\r\n}\r\n\r\ninterface SearchProps {\r\n    onStationSelected?:(station:Station)=> any\r\n    className?: string\r\n}\r\n\r\nlet currentSearch:RadioSearch|undefined // only one search active at a time\r\n\r\nexport default class Search extends React.Component<SearchProps, SearchState> {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            search: currentSearch,\r\n            searching: false\r\n        }\r\n        this.searchList = React.createRef<HTMLDivElement>()\r\n    }\r\n\r\n    async searchTextChanged(e) {\r\n        const query = e.target.value;\r\n        this.scheduleSearch(query)\r\n    }\r\n\r\n    private searchTimer\r\n    private searchList:React.RefObject<HTMLDivElement>\r\n\r\n    async scheduleSearch(query:string) {\r\n        this.searchTimer = clearTimeout(this.searchTimer)\r\n        this.searchTimer = setTimeout(async () => {\r\n            let search = new RadioSearch({name: query})\r\n            currentSearch = search\r\n            this.setState({searching: true})\r\n            await search.search()\r\n            // reset scroll\r\n            if (this.searchList.current) this.searchList.current.scrollTop = 0\r\n            this.setState({\r\n                search,\r\n                searching: false\r\n            })\r\n        }, 400)\r\n    }\r\n\r\n    render() {\r\n        const radioSearch = this.state.search; \r\n        let results:Station[]|undefined \r\n        if (radioSearch) {\r\n            results = radioSearch.results\r\n        }\r\n        let searching = this.state.searching ? <span className=\"loading\">Searching...</span> : undefined\r\n        return (\r\n            <div className={\"search flexible vertical \" + (this.props.className ?? \"\")}>\r\n                <div className=\"flexible horizontal\">\r\n                    <input className=\"flex1\" defaultValue={radioSearch ? radioSearch.query.name : \"\"} \r\n                      onInput={ (e) => { this.searchTextChanged(e) } }></input>\r\n                    {searching}\r\n                </div>\r\n                <div className=\"results flexible vertical\" style={{flex: 1}} >\r\n                    <div ref={this.searchList} className=\"scrollable\">\r\n                        <StationList stations={results} onStationSelected={this.props?.onStationSelected}></StationList>\r\n                    </div>\r\n                </div>  \r\n            </div>\r\n        )\r\n    }\r\n}","import React from \"react\"\r\nimport { Station } from \"../functions/radioSearch\";\r\n\r\ninterface StationsProps {\r\n    stations?: Station[]\r\n    onStationSelected?: (station:Station) => any\r\n}\r\n\r\nexport default class StationList extends React.Component<StationsProps, {}> {\r\n    render() {\r\n        const stations = this.props.stations;\r\n        if (stations) {\r\n            let results = stations.map(station => <div onClick={ () => this.props?.onStationSelected?.(station) } key={station.id}>\r\n                                                 <h3>{station.name}</h3>\r\n                                                 <div>{station.country}</div>\r\n                                                 <hr></hr>\r\n                                               </div> )\r\n            return results\r\n        } else return null\r\n    }\r\n}","import { Howl } from \"howler\"\r\nimport { Station, getStreamUrl } from \"./radioSearch\"\r\n\r\nexport type StatusCallback = (status:string, detail?:string)=>any\r\n\r\nexport default class RadioPlayer {\r\n    player:Howl|undefined\r\n    station:Station|undefined\r\n    private statusEmitter:StatusCallback[] = []\r\n\r\n    async setStation(station:Station) {\r\n        // stop old player\r\n        if (this.player) {\r\n            this.player.off(); // remove old events, and stop\r\n            this.player.stop();\r\n            this.player.unload();\r\n        }\r\n        this.fireStatusChange(\"load\", \"station\")\r\n        this.station = station\r\n        // get station url ...\r\n        let url:string|undefined = await getStreamUrl(station)\r\n        if (!url) {\r\n            this.fireStatusChange(\"error\", \"cannot resolve station url\")\r\n        } else {\r\n\r\n            this.player = new Howl({src: url, autoplay: false, html5: true})\r\n            this.fireStatusChange(\"load\", \"stream\")\r\n            this.player.on('load', ()=> this.fireStatusChange(\"load\", \"start playing\"))\r\n            this.player.on('play', ()=> this.fireStatusChange(\"play\") )\r\n            this.player.on('stop', ()=> this.fireStatusChange(\"stop\") )\r\n            this.player.on('pause', ()=> this.fireStatusChange(\"stop\") )\r\n\r\n            this.player.on('loaderror', ()=> this.fireStatusChange(\"error\", \"loading the stream failed\"))\r\n            this.player.on('playerror', ()=> this.fireStatusChange(\"error\", \"playback error\"))\r\n        }\r\n    }\r\n\r\n    play() {\r\n        this?.player?.play()\r\n    }\r\n\r\n    pause() {\r\n        this?.player?.pause()\r\n    }\r\n\r\n    private fireStatusChange(newStatus:string, detail?:string) {\r\n        for (let cb of this.statusEmitter) {\r\n            cb(newStatus, detail)\r\n        }\r\n    }\r\n\r\n    onStatusChanged(cb: StatusCallback) {\r\n        this.statusEmitter.push(cb)\r\n        return cb\r\n    }\r\n\r\n    offStatusChanged(cb:StatusCallback) {\r\n        const idx = this.statusEmitter.findIndex(val => cb == val)\r\n        if (idx >= 0)\r\n            this.statusEmitter.splice(idx, 1)\r\n    }\r\n}","import { Station } from \"./radioSearch\";\r\n\r\nexport type UpdateCallback = () => any\r\n\r\n// uses localStorage to keep a list of favorite stations\r\nclass Favorites {\r\n    private stations:Station[] = []\r\n    \r\n    add(station:Station) {\r\n        if (!this.isFavorite(station)) {\r\n            this.stations.push(station)\r\n            this.save()\r\n        }\r\n    }\r\n\r\n    remove(station:Station) {\r\n        const idx = this.stations.findIndex(val => val.id == station.id)\r\n        if (idx >= 0) {\r\n            this.stations.splice(idx, 1)\r\n            this.save()\r\n        }\r\n    }\r\n\r\n    isFavorite(station:Station):boolean {\r\n        const stat = this.stations.find(val => val.id == station.id)\r\n        return stat != undefined\r\n    }\r\n\r\n    get list() {\r\n        return this.stations\r\n    }\r\n\r\n    private save() { // save to local storage\r\n        localStorage.setItem(\"stations\", JSON.stringify(this.stations))\r\n        this.changed()\r\n    }\r\n\r\n    load() { // load from local storage\r\n        let stats = localStorage.getItem(\"stations\")\r\n        if (stats) {\r\n            this.stations = JSON.parse(stats)\r\n            this.changed()\r\n        }\r\n    }\r\n    \r\n    private updateCbs:UpdateCallback[] = []\r\n    onUpdated(ucb:UpdateCallback):UpdateCallback {\r\n        this.updateCbs.push(ucb)\r\n        return ucb\r\n    }\r\n\r\n    private changed() {\r\n        for (const cb of this.updateCbs)\r\n            cb()\r\n    }\r\n}\r\n\r\nexport const favorites = new Favorites()","import React from \"react\"\r\nimport { Station } from \"../functions/radioSearch\"\r\nimport RadioPlayer, {StatusCallback} from \"../functions/radioPlayer\"\r\nimport { favorites } from \"../functions/favorites\"\r\n\r\nexport let radioPlayer = new RadioPlayer()\r\n\r\ninterface PlayerProps {\r\n    station:Station|undefined\r\n    className:string\r\n}\r\n\r\ninterface PlayerState {\r\n    status: string\r\n    detail?: string \r\n}\r\n\r\nexport default class Player extends React.Component<PlayerProps, PlayerState> {\r\n    state:PlayerState = {\r\n        status : \"stop\",\r\n        \r\n    }\r\n\r\n    private statusChangeId:StatusCallback|undefined\r\n    componentDidMount() {\r\n        this.statusChangeId = radioPlayer.onStatusChanged((status, detail) => {\r\n            if (radioPlayer.station && this.props.station?.id == radioPlayer.station.id) // only change state, if we display details for the station playing\r\n                this.setState({\r\n                    status,\r\n                    detail\r\n                })\r\n        })\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        if (this.statusChangeId)\r\n            radioPlayer.offStatusChanged(this.statusChangeId)\r\n    }\r\n\r\n    async togglePlayback() {\r\n        if (!this.props.station)\r\n            return\r\n        const stat = this.getPlayStatus()\r\n        if (stat != \"play\") {\r\n            if (radioPlayer.station?.id != this.props.station.id)\r\n                await radioPlayer.setStation(this.props.station)\r\n            radioPlayer.play()\r\n        } else {\r\n            radioPlayer.pause()\r\n        }\r\n    }\r\n\r\n    getPlayStatus() {\r\n        let status = this.state.status // this can contain the last status updated by the player\r\n        if (this.props.station && this.props.station.id != radioPlayer.station?.id) {\r\n            status = \"stop\" // this stream hasn't been started\r\n        }\r\n        return status\r\n    }\r\n\r\n    toggleFavorite() {\r\n        const station = this.props.station;\r\n        if (station) {\r\n            if (favorites.isFavorite(station)) favorites.remove(station)\r\n            else favorites.add(station)\r\n            this.setState({}) // needs update\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const station = this.props.station;\r\n        if (!station) return null\r\n        let status = this.getPlayStatus()\r\n        \r\n        const buttonTextByStatus = {\r\n            play: \"Stop\",\r\n            stop: \"Play\",\r\n            load: \"Loading\",\r\n            error: `Error ${this.state.detail ?? \"\"}`\r\n        }\r\n        let playButtonText = buttonTextByStatus[status] ?? \"Error\"\r\n        let detailText:JSX.Element | undefined\r\n        if (this.state.detail) {\r\n        detailText = <span>{this.state.detail}</span>\r\n        }\r\n\r\n        return <div className={this.props.className}>\r\n                    <h2>{station.name}</h2>\r\n                    <p>in: {station.country}</p>\r\n                    <p>tags: {station.tags}</p>\r\n                    <div>\r\n                        <button onClick={e => this.togglePlayback()} >{playButtonText}</button> {/* toggle pause */}\r\n                        {detailText}\r\n                    </div>\r\n                    <div>\r\n                        <button onClick={()=> this.toggleFavorite()} >{favorites.isFavorite(station) ? \"Remove from favorites\" : \"Add to favorites\"}</button>\r\n                        <button>Vote!</button>\r\n                    </div>\r\n               </div>\r\n    }\r\n}","import React from 'react'\r\n\r\nexport default class About extends React.Component<{className:string}> {\r\n    render() {\r\n        return <div className={\"about \" + this.props.className} >\r\n            <h2>About</h2>\r\n            <p>\r\n                Open source webradio implementation using React. \r\n            </p>\r\n            <p>\r\n                Uses the api provided by <a href=\"http://www.radio-browser.info\">http://www.radio-browser.info</a>\r\n            </p>\r\n            <p>\r\n                If you find any issues, or have feature requests please report them at the project's github page: <a href=\"https://github.com/bxantus/webradio\">https://github.com/bxantus/webradio</a>\r\n            </p>\r\n        </div>\r\n    }\r\n}","import React from 'react';\r\nimport RadioSearch from './components/search'\r\nimport RadioPlayerUI, { radioPlayer } from './components/player'\r\nimport { Station } from './functions/radioSearch';\r\nimport About from './components/about';\r\nimport StationList from './components/stationList';\r\nimport { favorites } from './functions/favorites';\r\n\r\ninterface RadioState {\r\n    selectedTab:string\r\n    selectedStation:Station|undefined\r\n}\r\n\r\ninterface Tab {\r\n    title: string\r\n    content: (cls:string) => JSX.Element\r\n}\r\n\r\nexport default class WebradioApp extends React.Component<{}, RadioState> {\r\n    state:RadioState = {\r\n        selectedTab: \"Search\",\r\n        selectedStation: {\r\n            id: \"1\",\r\n            name: \"X-id\",\r\n            tags: \"alternative, rock\",\r\n            country: \"iceland\",\r\n            language: \"\",\r\n            icon: \"\",\r\n            votes: 0\r\n        }\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        favorites.load();\r\n    }\r\n\r\n    componentDidMount() {\r\n        favorites.onUpdated(() => {\r\n            this.setState({}) // update\r\n        })\r\n    }\r\n\r\n    get tabs() {\r\n        return [\r\n            { title: \"Search\", content: (cls:string) => <RadioSearch className={cls} onStationSelected={station=> this.stationSelected(station)}>Search content</RadioSearch> },\r\n            { title: \"Favorites\", content: (cls:string) => <div className={cls}><StationList stations={favorites.list} onStationSelected={station=> this.stationSelected(station)} ></StationList></div> },\r\n            { title: \"Play\", content: (cls:string) => <RadioPlayerUI className={cls} station={this.state.selectedStation}></RadioPlayerUI> },\r\n            { title: \"About\", content: (cls:string) => <About className={cls} ></About>}\r\n        ]\r\n    }\r\n\r\n    changeTab(tab:Tab, userSelect=true)  {\r\n        this.setState({\r\n            selectedTab: tab.title\r\n        })\r\n        if (userSelect) {\r\n            this.setState({\r\n                selectedStation: radioPlayer.station\r\n            })\r\n        }\r\n    }\r\n\r\n    stationSelected(station:Station) {\r\n        this.setState({\r\n            selectedStation: station\r\n        })\r\n        this.changeTab(this.tabs[2], /*userSelect*/false)  \r\n    }\r\n\r\n    render() {\r\n        const tabs = this.tabs\r\n        const selectedTabName = this.state.selectedTab\r\n        const selectedTab = tabs.find(tab => tab.title === selectedTabName)\r\n        const headerContent = tabs.map(tab => <span className={tab === selectedTab ? \"tab selected\" : \"tab\"}\r\n                                                    key={tab.title} onClick={e=>this.changeTab(tab)} >{tab.title}</span> )\r\n        const tabElements = tabs.map(tab => tab.content(tab == selectedTab ? \"visible\" : \"hidden\"))\r\n        \r\n        return (\r\n            <div className=\"radio-App flexible vertical\">\r\n                <div className=\"tabs\">{headerContent}</div>\r\n                {tabElements}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport WebRadio from './webradio'\n\nReactDOM.render(\n  <React.StrictMode>\n    <WebRadio>my text</WebRadio>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}